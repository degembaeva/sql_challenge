/*Свзи между таблицами
1) Один к одному
2) Один ко многим
3) Многие ко многим  


Связь один ко многим

Связь «один ко многим» имеет место, когда одной записи главной таблицы соответствует несколько записей связанной таблицы, 
а каждой записи связанной таблицы соответствует только одна запись главной таблицы.

При этом такая связь называется «один ко многим», таблица author называется главной, 
таблица book – связанной или подчиненной. Один автор может написать несколько книг, 
а одна книга написана только одним автором. Для каждой книги известны ее количество и цена.




******************************************************

Связь «многие ко многим  

Связь «многие ко многим» имеет место когда каждой записи одной таблицы соответствует несколько записей во второй, и наоборот, 
каждой записи второй таблицы соответствует несколько записей в первой. Обозначается это так:

Один автор может написать несколько книг, а одна книга может быть написана несколькими авторами. 
В таком случае создается отдельная таблица с 

***********************************************************


Создание таблицы с внешними ключами
При создании зависимой таблицы (таблицы, которая содержит внешние ключи) необходимо учитывать, что :

каждый внешний ключ должен иметь такой же тип данных, как связанное поле главной таблицы (в наших примерах это INT);
необходимо указать главную для нее таблицу и столбец, по которому осуществляется связь:
FOREIGN KEY (связанное_поле_зависимой_таблицы)  
REFERENCES главная_таблица (связанное_поле_главной_таблицы)
По умолчанию любой столбец, кроме ключевого, может содержать значение NULL. При создании таблицы это можно переопределить,  используя  ограничение NOT NULL для этого столбца:

CREATE TABLE таблица (
    столбец_1 INT NOT NULL, 
    столбец_2 VARCHAR(10) 
);
 В созданной таблице в столбец_1 не может содержать пустое значение, а столбец_2 - может.

Для внешних ключей рекомендуется устанавливать ограничение NOT NULL (если это совместимо с другими опциями, которые будут рассмотрены в следующем шаге).
*/

/*Пример

Создать таблицу book*/


CREATE TABLE book (
    book_id INT PRIMARY KEY AUTO_INCREMENT, 
    title VARCHAR(50), 
    author_id INT NOT NULL, 
    price DECIMAL(8,2), 
    amount INT, 
    FOREIGN KEY (author_id)  REFERENCES author (author_id) 
);


/*Задание
Перепишите запрос на создание таблицы book , чтобы ее структура соответствовала структуре, 
показанной на логической схеме (таблица genre уже создана, порядок следования столбцов - как на логической схеме 
в таблице book, genre_id  - внешний ключ) . Для genre_id ограничение о недопустимости пустых значений не задавать. 
В качестве главной таблицы для описания поля  genre_idиспользовать таблицу genre следующей структуры:*/


CREATE TABLE book (
  book_id INT PRIMARY KEY AUTO_INCREMENT,
  title VARCHAR(50),
  author_id INT NOT NULL,
  genre_id INT,
  price DECIMAL(8,2),
  amount INT,
  FOREIGN KEY (author_id) REFERENCES author(author_id),
  FOREIGN KEY (genre_id)  REFERENCES genre(genre_id)
);

/*Действия при удалении записи главной таблицы
С помощью выражения ON DELETE можно установить действия, которые выполняются для записей подчиненной таблицы при удалении связанной строки из главной таблицы. При удалении можно установить следующие опции:

CASCADE: автоматически удаляет строки из зависимой таблицы при удалении  связанных строк в главной таблице.
SET NULL: при удалении  связанной строки из главной таблицы устанавливает для столбца внешнего ключа значение NULL. (В этом случае столбец внешнего ключа должен поддерживать установку NULL).
SET DEFAULT похоже на SET NULL за тем исключением, что значение  внешнего ключа устанавливается не в NULL, а в значение по умолчанию для данного столбца.
RESTRICT: отклоняет удаление строк в главной таблице при наличии связанных строк в зависимой таблице.
Важно! Если для столбца установлена опция SET NULL, то при его описании нельзя задать ограничение на пустое значение.

Сравнительная таблица:

ON DELETE	Что происходит с книгами при удалении автора
CASCADE	Книги удаляются
SET NULL	author_id становится NULL
SET DEFAULT	author_id получает значение по умолчанию
RESTRICT	Ошибка – удаление запрещено*/


/*Пример

Будем считать, что при удалении автора из таблицы author, необходимо удалить все записи о книгах из таблицы book, 
написанные этим автором. Данное действие необходимо прописать при создании таблицы.*/

CREATE TABLE book (
    book_id INT PRIMARY KEY AUTO_INCREMENT, 
    title VARCHAR(50), 
    author_id INT NOT NULL, 
    price DECIMAL(8,2), 
    amount INT, 
    FOREIGN KEY (author_id)  REFERENCES author (author_id) ON DELETE CASCADE
);


/*Задание
Создать таблицу book той же структуры, что и на предыдущем шаге. Будем считать, что при удалении автора из таблицы author,
 должны удаляться все записи о книгах из таблицы book, написанные этим автором. А при удалении жанра из таблицы genre 
 для соответствующей записи book установить значение Null в столбце genre_id. */
 
 CREATE TABLE book(
    book_id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(50),
    author_id INT,
    FOREIGN KEY (author_id) REFERENCES author(author_id) ON DELETE CASCADE,
    genre_id INT,
    FOREIGN KEY (author_id) REFERENCES genre(genre_id) ON DELETE SET NULL,
    price DECIMAL(8,2),
    amount INT)





