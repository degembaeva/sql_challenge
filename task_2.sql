/*Выбор уникальных элементов столбца
Чтобы отобрать уникальные элементы некоторого столбца используется ключевое слово DISTINCT, 
которое размещается сразу после SELECT.*/

/*Пример

Выбрать различных авторов, книги которых хранятся в таблице book.*/

SELECT DISTINCT author
FROM book;


/*С помощью GROUP BY можно выбрать уникальные элементы столбца, по которому осуществляется группировка. 
Результат будет точно такой же как при использовании DISTINCT.*/

SELECT  author
FROM book
GROUP BY author;


/*Пример

Посчитать, сколько экземпляров книг каждого автора хранится на складе.*/

SELECT author, sum(amount)
FROM book
GROUP BY author

/*Пример
Посчитать, сколько различных книг каждого автора хранится на складе.*/


/* чтобы проверить запрос, добавьте в таблицу строку */
INSERT INTO book (title, author, price, amount) VALUES ('Черный человек','Есенин С.А.', Null, Null);

SELECT author, COUNT(author), COUNT(amount), COUNT(*)
FROM book
GROUP BY author;

/* COUNT(*) —  подсчитывает  все записи, относящиеся к группе, в том числе и со значением NULL;
COUNT(имя_столбца) — возвращает количество записей конкретного столбца (только NOT NULL), относящихся к группе.*/

/*Задание
Посчитать, количество различных книг и количество экземпляров книг каждого автора , хранящихся на складе.  
Столбцы назвать Автор, Различных_книг и Количество_экземпляров соответственно.*/

SELECT author as Автор, COUNT(DISTINCT title) as Различных_книг, SUM(amount) as Количество_экземпляров
FROM book
GROUP BY author

/*Пример

Вывести минимальную цену книги каждого автора*/

SELECT author, MIN(price) AS min_price
FROM book
GROUP BY author;


/*Задание
Вывести фамилию и инициалы автора, минимальную, максимальную и среднюю цену книг каждого автора . 
Вычисляемые столбцы назвать Минимальная_цена, Максимальная_цена и Средняя_цена соответственно.*/

SELECT author, MIN(price) as Минимальная_цена, MAX(price) as Максимальная_цена, AVG(price)as Средняя_цена
FROM book
GROUP BY author



/*Задание
Для каждого автора вычислить суммарную стоимость книг S (имя столбца Стоимость), 
а также вычислить налог на добавленную стоимость  для полученных сумм (имя столбца НДС ) , 
который включен в стоимость и составляет 18% (k=18),  а также стоимость книг  (Стоимость_без_НДС) без него. 
Значения округлить до двух знаков после запятой. В запросе для расчета НДС(tax)  и 
Стоимости без НДС(S_without_tax)*/


SELECT author, SUM(price*amount) as Стоимость ,ROUND((SUM(price*amount)*0.18)/1.18,2) as НДС, ROUND((SUM(price*amount))/1.18,2) as Стоимость_без_НДС FROM book
GROUP BY author


/*В запросах с групповыми функциями вместо WHERE используется ключевое слово HAVING , 
которое размещается после оператора GROUP BY.*/

/*Пример
Найти минимальную и максимальную цену книг всех авторов, общая стоимость книг которых больше 5000.*/

SELECT author,
    MIN(price) AS Минимальная_цена, 
    MAX(price) AS Максимальная_цена
FROM book
GROUP BY author
HAVING SUM(price * amount) > 5000; 
ORDER BY Минимальная_цена DESC;



/*Задание
Вычислить среднюю цену и суммарную стоимость тех книг, количество экземпляров которых принадлежит 
интервалу от 5 до 14, включительно. Столбцы назвать Средняя_цена и Стоимость, 
значения округлить до 2-х знаков после запятой.*/

SELECT ROUND(AVG(price),2) as Средняя_цена, SUM(price*amount) as Стоимость
FROM book
WHERE amount BETWEEN 5 AND 14



/*WHERE и HAVING могут использоваться в одном запросе. При этом необходимо учитывать 
порядок выполнения  SQL запроса на выборку на СЕРВЕРЕ:

1. FROM
2. WHERE
3. GROUP BY
4. HAVING
5. SELECT
6. ORDER BY

Сначала определяется таблица, из которой выбираются данные (FROM), затем из этой таблицы отбираются записи 
в соответствии с условием  WHERE, выбранные данные агрегируются (GROUP BY),  из агрегированных записей выбираются те, 
которые удовлетворяют условию после HAVING. Потом формируются данные результирующей выборки, 
как это указано после SELECT ( вычисляются выражения, присваиваются имена и пр. ). 
Результирующая выборка сортируется, как указано после ORDER BY.
*/


/*Пример

Вывести максимальную и минимальную цену книг каждого автора, кроме Есенина, 
количество экземпляров книг которого больше 10. */


SELECT author,
    MIN(price) AS Минимальная_цена,
    MAX(price) AS Максимальная_цена
FROM book
WHERE author <> 'Есенин С.А.'
GROUP BY author
HAVING SUM(amount) > 10;

/*Другим способом решения примера является запрос:*/
SELECT author,
    MIN(price) AS Минимальная_цена,
    MAX(price) AS Максимальная_цена
FROM book
GROUP BY author
HAVING SUM(amount) > 10 AND author <> 'Есенин С.А.';


/*Задание
Посчитать стоимость всех экземпляров каждого автора без учета книг «Идиот» и «Белая гвардия». 
В результат включить только тех авторов, у которых суммарная стоимость книг 
(без учета книг «Идиот» и «Белая гвардия») более 5000 руб. Вычисляемый столбец назвать Стоимость. 
Результат отсортировать по убыванию стоимости.*/


SELECT author, SUM(price*amount) as Стоимость
FROM book
WHERE title NOT IN("Идиот", "Белая гвардия")
GROUP BY author 
HAVING SUM(price*amount) > 5000
ORDER BY Стоимость DESC


/*Вложенный запрос, возвращающий одно значение, может использоваться в условии отбора записей WHERE 
как обычное значение совместно с операциями =, <>, >=, <=, >, <.*/


/*Пример

Вывести информацию о самых дешевых книгах, хранящихся на складе.

Для реализации этого запроса нам необходимо получить минимальную цену из столбца price таблицы book, 
а затем вывести информацию о тех книгах, цена которых  равна минимальной. 
Первая часть  – поиск  минимума – реализуется вложенным запросом.*/

SELECT title, author, price, amount
FROM book
WHERE price = (
         SELECT MIN(price) 
         FROM book
      );
      
      
 /*Задание
Вывести информацию (автора, название и цену) о  книгах, цены которых меньше или равны средней цене книг на складе. 
Информацию вывести в отсортированном по убыванию цены виде. Среднее вычислить как среднее по цене книги.*/


SELECT author, title, price
FROM book
WHERE price <= (SELECT AVG(price) FROM book)
ORDER BY price DESC




 /*Пример

Вывести информацию о книгах, количество экземпляров которых отличается от среднего количества экземпляров книг на
складе более чем на 3. То есть нужно вывести и те книги, количество экземпляров которых меньше среднего на 3, 
или больше среднего на 3.*/


SELECT title, author, amount 
FROM book
WHERE ABS(amount - (SELECT AVG(amount) FROM book)) >3;



/*Задание
Вывести информацию (автора, название и цену) о тех книгах, цены которых превышают минимальную цену книги 
на складе не более чем на 150 рублей в отсортированном по возрастанию цены виде.*/

SELECT author, title, price 
FROM book
WHERE price<=(SELECT MIN(price)+150 FROM book)
ORDER BY price 



/*Пример

Вывести информацию о книгах тех авторов, общее количество экземпляров книг которых не менее 12.*/


SELECT title, author, amount, price
FROM book
WHERE author IN (
        SELECT author 
        FROM book 
        GROUP BY author 
        HAVING SUM(amount) >= 12
      );
      
      
      
/*Задание
Вывести информацию (автора, книгу и количество) о тех книгах, 
количество экземпляров которых в таблице book не дублируется.*/


SELECT author, title, amount
FROM book
WHERE amount IN(SELECT amount FROM book
                     GROUP BY amount
                     HAVING COUNT(*)=1)
                     
                     
                     
/*Оператор ALL возвращает TRUE, если условие выполняется для всех значений из подзапроса.​ AND 
Оператор ANY возвращает TRUE, если условие выполняется хотя бы для одного значения из подзапроса. OR*

Используйте ANY, когда нужно проверить, удовлетворяет ли значение хотя бы одному из условий.
Используйте ALL, когда нужно убедиться, что значение удовлетворяет всем условиям.*/

/*Пример

Вывести информацию о тех книгах, количество которых меньше самого маленького среднего количества книг каждого автора.*/

SELECT title, author, amount, price
FROM book
WHERE amount < ALL (
        SELECT AVG(amount) 
        FROM book 
        GROUP BY author 
      );
      
      



/*Задание
Вывести информацию о книгах(автор, название, цена), цена которых меньше самой большой из минимальных цен, 
вычисленных для каждого автора.

1. Найти минимальную цену для каждого автора:(Внутренний подзапрос)
SELECT MIN(price)
FROM book
GROUP BY author;

2. Найти самую большую из этих минимальных цен: (Внешний подзапрос)
SELECT MAX(min_price)
FROM (
    SELECT MIN(price) AS min_price
    FROM book
    GROUP BY author
) AS sub;

3. Выбрать книги с ценой меньше этой максимальной минимальной цены: (Основной запрос)
SELECT author, title, price
FROM book
WHERE price < (
*/

SELECT author, title, price
FROM book
WHERE price < (
    SELECT MAX(min_price)
    FROM (
        SELECT MIN(price) AS min_price
        FROM book
        GROUP BY author
    ) AS sub
);

/*Вложенный запрос может располагаться после ключевого слова SELECT. В этом случае результат выполнения 
запроса выводится в отдельном столбце результирующей таблицы. При этом результатом запроса может быть только 
одно значение, тогда оно будет повторяться во всех строках. Также вложенный запрос может использоваться в выражениях.*/

/*Пример

Вывести информацию о книгах, количество экземпляров которых отличается от среднего количества экземпляров книг 
на складе более чем на 3,  а также указать среднее значение количества экземпляров книг.*/

SELECT title, author, amount, 
    (
     SELECT AVG(amount) 
     FROM book
    ) AS Среднее_количество 
FROM book
WHERE abs(amount - (SELECT AVG(amount) FROM book)) >3;


/*Задание
Посчитать сколько и каких экземпляров книг нужно заказать поставщикам, чтобы на складе стало одинаковое количество 
экземпляров каждой книги, равное значению самого большего количества экземпляров одной книги на складе. 
Вывести название книги, ее автора, текущее количество экземпляров на складе и количество заказываемых экземпляров 
книг. Последнему столбцу присвоить имя Заказ. В результат не включать книги, которые заказывать не нужно.*/


SELECT title, author, amount, (max_order - amount) as Заказ 
    FROM (SELECT title, author, amount, (SELECT MAX(amount) FROM book) as max_order
    FROM book) as sub
    WHERE  (max_order - amount) > 0;



/*Максимальное количество книг одного автора*/
SELECT MAX(total_amount) FROM (
    SELECT SUM(amount) as total_amount
    FROM book
    GROUP BY author
) as stp









